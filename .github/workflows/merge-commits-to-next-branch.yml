name: Merge commits to next branch

on:
  push:
    branch: [ test_main ]

env:
  COMMIT_INFO: commit-info
  TARGET_BRANCH: test_next
  SOURCE_BRANCH: test_main

jobs:
  dequeue:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - run: npm ci
      - run: npm install @azure/storage-queue
      - uses: actions/github-script@v6
        id: deque-message
        with:
          script: |
            const { QueueClient, QueueServiceClient } = require('@azure/storage-queue')
            const connectionString = `${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}`;
            const queueName = `${{ secrets.AZURE_QUEUE_NAME }}`;
            const queueServiceClient = QueueServiceClient.fromConnectionString(connectionString);
            const queueClient = queueServiceClient.getQueueClient(queueName);
            var receivedMessages = await queueClient.receiveMessages();
            const message = receivedMessages.receivedMessageItems[0];
            const firstMessage = JSON.parse(message.messageText);
            console.log("Commit info---", firstMessage);
            return firstMessage;
    outputs:
      COMMIT_INFO: ${{ steps.deque-message.outputs.result }}
  create-branch:
    runs-on: ubuntu-latest
    needs: [ dequeue ]
    if: (needs.dequeue.result) == 'success'
    steps:
      - run:
          echo "${{needs.dequeue.outputs.COMMIT_INFO}}"
          echo "${{needs.dequeue.outputs.COMMIT_INFO}}.label"
          echo "${{needs.dequeue.outputs.COMMIT_INFO}}.sha"
      - name: Git checkout
        if: (${{needs.dequeue.outputs.COMMIT_INFO}}).label == 'queued'
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Create branch
        if: (${{needs.dequeue.outputs.COMMIT_INFO}}).label == 'queued'
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git fetch origin
          git checkout test_next
          git checkout -b main-next-"${{needs.dequeue.outputs.COMMIT_INFO}}).sha"
# git merge sha --no-ff
  reset-branch:
    runs-on: ubuntu-latest
    needs: [ dequeue, create-branch ]
    if: needs.create-branch.result == 'failure'
    steps:
      - name: Git checkout
        if: (${{needs.dequeue.outputs.COMMIT_INFO}}).label == 'queued'
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Reset main to a commit
        if: (${{needs.dequeue.outputs.COMMIT_INFO}}).label == 'queued'
        run: |
          git fetch origin
          git checkout $SOURCE_BRANCH
          git branch -D main-next-(${{needs.dequeue.outputs.COMMIT_INFO}}).sha
          git checkout -b main-next-(${{needs.dequeue.outputs.COMMIT_INFO}}).sha
          git reset --hard (${{needs.dequeue.outputs.COMMIT_INFO}}).sha




  # createPullRequest:
  #   runs-on: ubuntu-latest
  #   needs: [ create-branch ]
  #   if: ( ${{ env.COMMIT_INFO }}.label == 'queued' && needs.create-branch.result == 'success'
  #     )
  #   steps:
  #     - name: Create Pull Request
  #       uses: actions/github-script@7a5c598405937d486b0331594b5da2b14db670da # pin@v6
  #       with:
  #         script: |
  #           const { repo, owner } = context.repo;
  #           const newPr = await github.rest.pulls.create({
  #             title: '[Main:Next] Integrate ${{ env.COMMIT_INFO }}.sha',
  #             'sonalivdeshpande',
  #             repo,
  #             head: 'main-next-${{ env.COMMIT_INFO }}.sha',
  #             base: '$TARGET_BRANCH',
  #             body: [
  #               'This PR is auto-generated by',
  #               '[actions/github-script](https://github.com/actions/github-script).'
  #             ].join('\n')
  #           });
  #           github.rest.issues.addLabels({
  #             owner,
  #             repo,
  #             issue_number: newPr.data.number,
  #             labels: ['merge: next', 'automated pr']
  #           });
  # update-commit-status:
  #   runs-on: ubuntu-latest
  #   needs: [ createPullRequest ]
  #   if: ( needs.createPullRequest.result == 'success' )
  #   steps:
  #     - uses: actions/checkout@7884fcad6b5d53d10323aee724dc68d8b9096a2e # pin@v2
  #     - uses: actions/setup-node@1f8c6b94b26d0feae1e387ca63ccbdc44d27b561 # pin@v2
  #       with:
  #         node-version: 14
  #     - run: npm ci
  #     - run: npm install @azure/storage-queue
  #     - uses: actions/github-script@7a5c598405937d486b0331594b5da2b14db670da # pin@v6
  #       with:
  #         script: |
  #           const { QueueClient, QueueServiceClient } = require('@azure/storage-queue')
  #           const connectionString = `${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}`;
  #           const queueServiceClient = QueueServiceClient.fromConnectionString(connectionString);
  #           const queueName = `${{ secrets.AZURE_QUEUE_NAME }}`;
  #           const queueClient = queueServiceClient.getQueueClient(queueName);
  #           const receivedMessages = await queueClient.receiveMessages();
  #           const firstMessage = receivedMessages.receivedMessageItems[0];
  #           await queueClient.updateMessage(
  #               firstMessage.sha,
  #               firstMessage.assignee,
  #               'in-progress');
  # remove-from-queue:
  #   runs-on: ubuntu-latest
  #   needs: [ createPullRequest ]
  #   if: ( needs.createPullRequest.result == 'success' ) &&
  #     (needs.createPullRequest.result.action == 'closed' ||
  #     needs.createPullRequest.result.merged == 'true' )
  #   steps:
  #     - uses: actions/checkout@7884fcad6b5d53d10323aee724dc68d8b9096a2e # pin@v2
  #     - uses: actions/setup-node@1f8c6b94b26d0feae1e387ca63ccbdc44d27b561 # pin@v2
  #       with:
  #         node-version: 14
  #     - run: npm ci
  #     - run: npm install @azure/storage-queue
  #     - uses: actions/github-script@7a5c598405937d486b0331594b5da2b14db670da # pin@v6
  #       with:
  #         script: |
  #           const { QueueClient, QueueServiceClient } = require('@azure/storage-queue')
  #           const connectionString = `${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}`;
  #           const queueServiceClient = QueueServiceClient.fromConnectionString(connectionString);
  #           const queueName = `${{ secrets.AZURE_QUEUE_NAME }}`;
  #           const queueClient = queueServiceClient.getQueueClient(queueName);
  #           receivedMessages = await queueClient.receiveMessages();
  #           var message = receivedMessages.receivedMessageItems[0];
  #           await queueClient.deleteMessage(message.messageId, message.popReceipt);
