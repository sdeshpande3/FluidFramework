name: Merge commits to next branch

on:
  push:
    branch: [ test_main ]

env:
  TARGET_BRANCH: test_next
  SOURCE_BRANCH: test_main

jobs:
  dequeue:  # update message queue to in-progress
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - run: npm ci
      - run: npm install @azure/storage-queue
      - run: |
          echo ${{ github.respository }}
          echo ${{ github.event.repository.name }}
      - uses: actions/github-script@v6
        id: deque-message
        with:
          script: |
            const { QueueClient, QueueServiceClient } = require('@azure/storage-queue')
            const connectionString = `${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}`;
            const queueName = `${{ secrets.AZURE_QUEUE_NAME }}`;
            const queueServiceClient = QueueServiceClient.fromConnectionString(connectionString);
            const queueClient = queueServiceClient.getQueueClient(queueName);
            var receivedMessages = await queueClient.receiveMessages();
            const message = receivedMessages.receivedMessageItems[0];
            const firstMessage = JSON.parse(message.messageText);
            console.log("Commit info---", firstMessage.sha);
            console.log("Commit info---", firstMessage.author);
            console.log("Commit info---", firstMessage.label);
            return firstMessage;
    outputs:
      LABEL: ${{ fromJSON(steps.deque-message.outputs.result).label }}
      AUTHOR: ${{ fromJSON(steps.deque-message.outputs.result).author }}
      SHA: ${{ fromJSON(steps.deque-message.outputs.result).sha }}
  create-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    needs: [ dequeue ]
    if: (needs.dequeue.result) == 'success'
    steps:
      - run:
          echo ${{needs.dequeue.outputs.LABEL}}
      - name: Git checkout
        if: ${{needs.dequeue.outputs.LABEL}} == 'queued'
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
          fetch-depth: '0'
      - name: Create branch
        if: ${{needs.dequeue.outputs.LABEL}} == 'queued'
        run: |
          git config user.name "Automation Bot"
          git config user.email "<>"
          git fetch origin
          git checkout test_next
          git checkout -b main-next-${{needs.dequeue.outputs.SHA}}
          git merge ${{needs.dequeue.outputs.SHA}} --no-ff
          git push --set-upstream origin main-next-${{needs.dequeue.outputs.SHA}}
      - name: Check branch exists
        run: |
          git rev-parse --verify main-next-${{needs.dequeue.outputs.SHA}}
  reset-branch:
    runs-on: ubuntu-latest
    needs: [ dequeue, create-branch ]
    if: needs.create-branch.result == 'failure'
    steps:
      - name: Git checkout
        if: ${{needs.dequeue.outputs.LABEL}} == 'queued'
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Reset main to a commit
        if: ${{needs.dequeue.outputs.LABEL}} == 'queued'
        run: |
          git fetch origin
          git checkout $SOURCE_BRANCH
          git branch -D main-next-${{needs.dequeue.outputs.SHA}}
          git checkout -b main-next-${{needs.dequeue.outputs.SHA}}
          git reset --hard ${{needs.dequeue.outputs.SHA}}
  createPullRequest:
    runs-on: ubuntu-latest
    needs: [ create-branch, dequeue ]
    if: needs.create-branch.result == 'success'
    steps:
      - name: Git checkout
        if: ${{needs.dequeue.outputs.LABEL}} == 'queued'
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
          fetch-depth: '0'
      # - name: Create Pull Request
      #   if: ${{needs.dequeue.outputs.LABEL}} == 'queued'
      #   uses: peter-evans/create-pull-request@v4
      #   with:
      #     branch: main-next-${{needs.dequeue.outputs.SHA}}
      #     base: test_next
      #     title: My pull request
      - run: npm install @octokit/rest
      - name: Create PR using octokit
        with:
          script: |
            const { Octokit } = require("@octokit/rest");
            const octokit = new Octokit();
            octokit.rest.pulls.create({
            sonalivdeshpande,
            'https://github.com/sonalivdeshpande/FluidFramework',
            'test PR',
            main-next-${{needs.dequeue.outputs.SHA}},
            next,
          });
  remove-from-queue:
    runs-on: ubuntu-latest
    needs: [ createPullRequest, dequeue ]
    if: ( needs.createPullRequest.result == 'success' )
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - run: npm ci
      - run: npm install @azure/storage-queue
      - uses: actions/github-script@v6
        with:
          script: |
            const { QueueClient, QueueServiceClient } = require('@azure/storage-queue')
            const connectionString = `${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}`;
            const queueServiceClient = QueueServiceClient.fromConnectionString(connectionString);
            const queueName = `${{ secrets.AZURE_QUEUE_NAME }}`;
            const queueClient = queueServiceClient.getQueueClient(queueName);
            const receivedMessages = await queueClient.receiveMessages();
            var message = receivedMessages.receivedMessageItems[0];
            console.log("message: ", message);
            await queueClient.deleteMessage(message.messageId, message.popReceipt);
